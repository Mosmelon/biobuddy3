{"ast":null,"code":"'use strict';\n\nconst tls = require('tls');\n\nmodule.exports = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let connect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : tls.connect;\n  return new Promise((resolve, reject) => {\n    let timeout = false;\n    let socket;\n\n    const callback = async () => {\n      await socketPromise;\n      socket.off('timeout', onTimeout);\n      socket.off('error', reject);\n\n      if (options.resolveSocket) {\n        resolve({\n          alpnProtocol: socket.alpnProtocol,\n          socket,\n          timeout\n        });\n\n        if (timeout) {\n          await Promise.resolve();\n          socket.emit('timeout');\n        }\n      } else {\n        socket.destroy();\n        resolve({\n          alpnProtocol: socket.alpnProtocol,\n          timeout\n        });\n      }\n    };\n\n    const onTimeout = async () => {\n      timeout = true;\n      callback();\n    };\n\n    const socketPromise = (async () => {\n      try {\n        socket = await connect(options, callback);\n        socket.on('error', reject);\n        socket.once('timeout', onTimeout);\n      } catch (error) {\n        reject(error);\n      }\n    })();\n  });\n};","map":{"version":3,"sources":["C:/Users/Moa/Desktop/BioBuddy/BioBuddy/node_modules/resolve-alpn/index.js"],"names":["tls","require","module","exports","options","connect","Promise","resolve","reject","timeout","socket","callback","socketPromise","off","onTimeout","resolveSocket","alpnProtocol","emit","destroy","on","once","error"],"mappings":"AAAA;;AACA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAnB;;AAEAC,MAAM,CAACC,OAAP,GAAiB;AAAA,MAACC,OAAD,uEAAW,EAAX;AAAA,MAAeC,OAAf,uEAAyBL,GAAG,CAACK,OAA7B;AAAA,SAAyC,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1F,QAAIC,OAAO,GAAG,KAAd;AAEA,QAAIC,MAAJ;;AAEA,UAAMC,QAAQ,GAAG,YAAY;AAC5B,YAAMC,aAAN;AAEAF,MAAAA,MAAM,CAACG,GAAP,CAAW,SAAX,EAAsBC,SAAtB;AACAJ,MAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBL,MAApB;;AAEA,UAAIJ,OAAO,CAACW,aAAZ,EAA2B;AAC1BR,QAAAA,OAAO,CAAC;AAACS,UAAAA,YAAY,EAAEN,MAAM,CAACM,YAAtB;AAAoCN,UAAAA,MAApC;AAA4CD,UAAAA;AAA5C,SAAD,CAAP;;AAEA,YAAIA,OAAJ,EAAa;AACZ,gBAAMH,OAAO,CAACC,OAAR,EAAN;AACAG,UAAAA,MAAM,CAACO,IAAP,CAAY,SAAZ;AACA;AACD,OAPD,MAOO;AACNP,QAAAA,MAAM,CAACQ,OAAP;AACAX,QAAAA,OAAO,CAAC;AAACS,UAAAA,YAAY,EAAEN,MAAM,CAACM,YAAtB;AAAoCP,UAAAA;AAApC,SAAD,CAAP;AACA;AACD,KAjBD;;AAmBA,UAAMK,SAAS,GAAG,YAAY;AAC7BL,MAAAA,OAAO,GAAG,IAAV;AACAE,MAAAA,QAAQ;AACR,KAHD;;AAKA,UAAMC,aAAa,GAAG,CAAC,YAAY;AAClC,UAAI;AACHF,QAAAA,MAAM,GAAG,MAAML,OAAO,CAACD,OAAD,EAAUO,QAAV,CAAtB;AAEAD,QAAAA,MAAM,CAACS,EAAP,CAAU,OAAV,EAAmBX,MAAnB;AACAE,QAAAA,MAAM,CAACU,IAAP,CAAY,SAAZ,EAAuBN,SAAvB;AACA,OALD,CAKE,OAAOO,KAAP,EAAc;AACfb,QAAAA,MAAM,CAACa,KAAD,CAAN;AACA;AACD,KATqB,GAAtB;AAUA,GAvCyD,CAAzC;AAAA,CAAjB","sourcesContent":["'use strict';\nconst tls = require('tls');\n\nmodule.exports = (options = {}, connect = tls.connect) => new Promise((resolve, reject) => {\n\tlet timeout = false;\n\n\tlet socket;\n\n\tconst callback = async () => {\n\t\tawait socketPromise;\n\n\t\tsocket.off('timeout', onTimeout);\n\t\tsocket.off('error', reject);\n\n\t\tif (options.resolveSocket) {\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, socket, timeout});\n\n\t\t\tif (timeout) {\n\t\t\t\tawait Promise.resolve();\n\t\t\t\tsocket.emit('timeout');\n\t\t\t}\n\t\t} else {\n\t\t\tsocket.destroy();\n\t\t\tresolve({alpnProtocol: socket.alpnProtocol, timeout});\n\t\t}\n\t};\n\n\tconst onTimeout = async () => {\n\t\ttimeout = true;\n\t\tcallback();\n\t};\n\n\tconst socketPromise = (async () => {\n\t\ttry {\n\t\t\tsocket = await connect(options, callback);\n\n\t\t\tsocket.on('error', reject);\n\t\t\tsocket.once('timeout', onTimeout);\n\t\t} catch (error) {\n\t\t\treject(error);\n\t\t}\n\t})();\n});\n"]},"metadata":{},"sourceType":"script"}