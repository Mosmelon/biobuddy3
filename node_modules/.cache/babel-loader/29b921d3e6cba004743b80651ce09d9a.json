{"ast":null,"code":"import axios from 'axios';\nconst apiKey = '618a4d3048a1a1f797c014affaf110b4';\nconst url = 'https://api.themoviedb.org/3';\nconst nowPlayingUrl = `${url}/movie/now_playing`;\nconst topratedUrl = `${url}/movie/top_rated`;\nconst movieUrl = `${url}/movie`;\nconst genreUrl = `${url}/genre/movie/list`;\nconst moviesUrl = `${url}/discover/movie`;\nconst personUrl = `${url}/trending/person/week`;\n\nconst handleMovieClick = (id, path) => async dispatch => {\n  dispatch({\n    type: MOVIE_CLICKED,\n    payload: id\n  });\n  let navigationPath = `${path}/${id}/details`;\n  history.push(navigationPath);\n};\n\nexport const fetchMovies = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(nowPlayingUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchGenre = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(genreUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const modifiedData = data['genres'].map(g => ({\n      id: g['id'],\n      name: g['name']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieByGenre = async genre_id => {\n  try {\n    const {\n      data\n    } = await axios.get(moviesUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1,\n        with_genres: genre_id\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchPersons = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(personUrl, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['results'].map(p => ({\n      id: p['id'],\n      popularity: p['popularity'],\n      name: p['name'],\n      profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\n      known: p['known_for_department']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchTopratedMovie = async () => {\n  try {\n    const {\n      data\n    } = await axios.get(topratedUrl, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US',\n        page: 1\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchMovieDetail = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    return data;\n  } catch (error) {}\n};\nexport const fetchMovieVideos = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/videos`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    return data['results'][0];\n  } catch (error) {}\n};\nexport const fetchCasts = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/credits`, {\n      params: {\n        api_key: apiKey\n      }\n    });\n    const modifiedData = data['cast'].map(c => ({\n      id: c['cast_id'],\n      character: c['character'],\n      name: c['name'],\n      img: 'https://image.tmdb.org/t/p/w200' + c['profile_path']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};\nexport const fetchSimilarMovie = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`${movieUrl}/${id}/similar`, {\n      params: {\n        api_key: apiKey,\n        language: 'en_US'\n      }\n    });\n    const posterUrl = 'https://image.tmdb.org/t/p/original/';\n    const modifiedData = data['results'].map(m => ({\n      id: m['id'],\n      backPoster: posterUrl + m['backdrop_path'],\n      popularity: m['popularith'],\n      title: m['title'],\n      poster: posterUrl + m['poster_path'],\n      overview: m['overview'],\n      rating: m['vote_average']\n    }));\n    return modifiedData;\n  } catch (error) {}\n};","map":{"version":3,"sources":["C:/Users/Moa/desktop/BioBuddy/BioBuddy/src/getdetail.js"],"names":["axios","apiKey","url","nowPlayingUrl","topratedUrl","movieUrl","genreUrl","moviesUrl","personUrl","handleMovieClick","id","path","dispatch","type","MOVIE_CLICKED","payload","navigationPath","history","push","fetchMovies","data","get","params","api_key","language","page","posterUrl","modifiedData","map","m","backPoster","popularity","title","poster","overview","rating","error","fetchGenre","g","name","fetchMovieByGenre","genre_id","with_genres","fetchPersons","p","profileImg","known","fetchTopratedMovie","fetchMovieDetail","fetchMovieVideos","fetchCasts","c","character","img","fetchSimilarMovie"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG,kCAAf;AACA,MAAMC,GAAG,GAAG,8BAAZ;AACA,MAAMC,aAAa,GAAI,GAAED,GAAI,oBAA7B;AACA,MAAME,WAAW,GAAI,GAAEF,GAAI,kBAA3B;AACA,MAAMG,QAAQ,GAAI,GAAEH,GAAI,QAAxB;AACA,MAAMI,QAAQ,GAAI,GAAEJ,GAAI,mBAAxB;AACA,MAAMK,SAAS,GAAI,GAAEL,GAAI,iBAAzB;AACA,MAAMM,SAAS,GAAI,GAAEN,GAAI,uBAAzB;;AAGA,MAAMO,gBAAgB,GAAG,CAACC,EAAD,EAAKC,IAAL,KAAc,MAAOC,QAAP,IAAoB;AACvDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEC,aAAR;AAAuBC,IAAAA,OAAO,EAAEL;AAAhC,GAAD,CAAR;AAEA,MAAIM,cAAc,GAAI,GAAEL,IAAK,IAAGD,EAAG,UAAnC;AAEAO,EAAAA,OAAO,CAACC,IAAR,CAAaF,cAAb;AACD,CANH;;AAQA,OAAO,MAAMG,WAAW,GAAG,YAAY;AACnC,MAAI;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAUlB,aAAV,EAAyB;AAC5CmB,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE,OAFN;AAGJC,QAAAA,IAAI,EAAE;AAHF;AADoC,KAAzB,CAAvB;AAQA,UAAMC,SAAS,GAAG,sCAAlB;AACA,UAAMC,YAAY,GAAGP,IAAI,CAAC,SAAD,CAAJ,CAAgBQ,GAAhB,CAAqBC,CAAD,KAAQ;AAC7CnB,MAAAA,EAAE,EAAEmB,CAAC,CAAC,IAAD,CADwC;AAE7CC,MAAAA,UAAU,EAAEJ,SAAS,GAAGG,CAAC,CAAC,eAAD,CAFoB;AAG7CE,MAAAA,UAAU,EAAEF,CAAC,CAAC,YAAD,CAHgC;AAI7CG,MAAAA,KAAK,EAAEH,CAAC,CAAC,OAAD,CAJqC;AAK7CI,MAAAA,MAAM,EAAEP,SAAS,GAAGG,CAAC,CAAC,aAAD,CALwB;AAM7CK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,UAAD,CANkC;AAO7CM,MAAAA,MAAM,EAAEN,CAAC,CAAC,cAAD;AAPoC,KAAR,CAApB,CAArB;AAUA,WAAOF,YAAP;AACH,GArBD,CAqBE,OAAOS,KAAP,EAAc,CAAG;AACtB,CAvBM;AAyBP,OAAO,MAAMC,UAAU,GAAG,YAAY;AAClC,MAAI;AACA,UAAM;AAAEjB,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAUf,QAAV,EAAoB;AACvCgB,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE,OAFN;AAGJC,QAAAA,IAAI,EAAE;AAHF;AAD+B,KAApB,CAAvB;AAOA,UAAME,YAAY,GAAGP,IAAI,CAAC,QAAD,CAAJ,CAAeQ,GAAf,CAAoBU,CAAD,KAAQ;AAC5C5B,MAAAA,EAAE,EAAE4B,CAAC,CAAC,IAAD,CADuC;AAE5CC,MAAAA,IAAI,EAAED,CAAC,CAAC,MAAD;AAFqC,KAAR,CAAnB,CAArB;AAIA,WAAOX,YAAP;AACH,GAbD,CAaE,OAAOS,KAAP,EAAc,CAAG;AACtB,CAfM;AAiBP,OAAO,MAAMI,iBAAiB,GAAG,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACA,UAAM;AAAErB,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAUd,SAAV,EAAqB;AACxCe,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE,OAFN;AAGJC,QAAAA,IAAI,EAAE,CAHF;AAIJiB,QAAAA,WAAW,EAAED;AAJT;AADgC,KAArB,CAAvB;AAQA,UAAMf,SAAS,GAAG,sCAAlB;AACA,UAAMC,YAAY,GAAGP,IAAI,CAAC,SAAD,CAAJ,CAAgBQ,GAAhB,CAAqBC,CAAD,KAAQ;AAC7CnB,MAAAA,EAAE,EAAEmB,CAAC,CAAC,IAAD,CADwC;AAE7CC,MAAAA,UAAU,EAAEJ,SAAS,GAAGG,CAAC,CAAC,eAAD,CAFoB;AAG7CE,MAAAA,UAAU,EAAEF,CAAC,CAAC,YAAD,CAHgC;AAI7CG,MAAAA,KAAK,EAAEH,CAAC,CAAC,OAAD,CAJqC;AAK7CI,MAAAA,MAAM,EAAEP,SAAS,GAAGG,CAAC,CAAC,aAAD,CALwB;AAM7CK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,UAAD,CANkC;AAO7CM,MAAAA,MAAM,EAAEN,CAAC,CAAC,cAAD;AAPoC,KAAR,CAApB,CAArB;AAUA,WAAOF,YAAP;AACH,GArBD,CAqBE,OAAOS,KAAP,EAAc,CAAG;AACtB,CAvBM;AAyBP,OAAO,MAAMO,YAAY,GAAG,YAAY;AACpC,MAAI;AACA,UAAM;AAAEvB,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAUb,SAAV,EAAqB;AACxCc,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB;AADL;AADgC,KAArB,CAAvB;AAKA,UAAM0B,YAAY,GAAGP,IAAI,CAAC,SAAD,CAAJ,CAAgBQ,GAAhB,CAAqBgB,CAAD,KAAQ;AAC7ClC,MAAAA,EAAE,EAAEkC,CAAC,CAAC,IAAD,CADwC;AAE7Cb,MAAAA,UAAU,EAAEa,CAAC,CAAC,YAAD,CAFgC;AAG7CL,MAAAA,IAAI,EAAEK,CAAC,CAAC,MAAD,CAHsC;AAI7CC,MAAAA,UAAU,EAAE,oCAAoCD,CAAC,CAAC,cAAD,CAJJ;AAK7CE,MAAAA,KAAK,EAAEF,CAAC,CAAC,sBAAD;AALqC,KAAR,CAApB,CAArB;AAOA,WAAOjB,YAAP;AACH,GAdD,CAcE,OAAOS,KAAP,EAAc,CAAG;AACtB,CAhBM;AAkBP,OAAO,MAAMW,kBAAkB,GAAG,YAAY;AAC1C,MAAI;AACA,UAAM;AAAE3B,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAUjB,WAAV,EAAuB;AAC1CkB,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE,OAFN;AAGJC,QAAAA,IAAI,EAAE;AAHF;AADkC,KAAvB,CAAvB;AAOA,UAAMC,SAAS,GAAG,sCAAlB;AACA,UAAMC,YAAY,GAAGP,IAAI,CAAC,SAAD,CAAJ,CAAgBQ,GAAhB,CAAqBC,CAAD,KAAQ;AAC7CnB,MAAAA,EAAE,EAAEmB,CAAC,CAAC,IAAD,CADwC;AAE7CC,MAAAA,UAAU,EAAEJ,SAAS,GAAGG,CAAC,CAAC,eAAD,CAFoB;AAG7CE,MAAAA,UAAU,EAAEF,CAAC,CAAC,YAAD,CAHgC;AAI7CG,MAAAA,KAAK,EAAEH,CAAC,CAAC,OAAD,CAJqC;AAK7CI,MAAAA,MAAM,EAAEP,SAAS,GAAGG,CAAC,CAAC,aAAD,CALwB;AAM7CK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,UAAD,CANkC;AAO7CM,MAAAA,MAAM,EAAEN,CAAC,CAAC,cAAD;AAPoC,KAAR,CAApB,CAArB;AAUA,WAAOF,YAAP;AACH,GApBD,CAoBE,OAAOS,KAAP,EAAc,CAEf;AACJ,CAxBM;AA0BP,OAAO,MAAMY,gBAAgB,GAAG,MAAOtC,EAAP,IAAc;AAC1C,MAAI;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEhB,QAAS,IAAGK,EAAG,EAA5B,EAA+B;AAClDY,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE;AAFN;AAD0C,KAA/B,CAAvB;AAMA,WAAOJ,IAAP;AACH,GARD,CAQE,OAAOgB,KAAP,EAAc,CAAG;AACtB,CAVM;AAYP,OAAO,MAAMa,gBAAgB,GAAG,MAAOvC,EAAP,IAAc;AAC1C,MAAI;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEhB,QAAS,IAAGK,EAAG,SAA5B,EAAsC;AACzDY,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB;AADL;AADiD,KAAtC,CAAvB;AAKA,WAAOmB,IAAI,CAAC,SAAD,CAAJ,CAAgB,CAAhB,CAAP;AACH,GAPD,CAOE,OAAOgB,KAAP,EAAc,CAAG;AACtB,CATM;AAWP,OAAO,MAAMc,UAAU,GAAG,MAAOxC,EAAP,IAAc;AACpC,MAAI;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEhB,QAAS,IAAGK,EAAG,UAA5B,EAAuC;AAC1DY,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB;AADL;AADkD,KAAvC,CAAvB;AAKA,UAAM0B,YAAY,GAAGP,IAAI,CAAC,MAAD,CAAJ,CAAaQ,GAAb,CAAkBuB,CAAD,KAAQ;AAC1CzC,MAAAA,EAAE,EAAEyC,CAAC,CAAC,SAAD,CADqC;AAE1CC,MAAAA,SAAS,EAAED,CAAC,CAAC,WAAD,CAF8B;AAG1CZ,MAAAA,IAAI,EAAEY,CAAC,CAAC,MAAD,CAHmC;AAI1CE,MAAAA,GAAG,EAAE,oCAAoCF,CAAC,CAAC,cAAD;AAJA,KAAR,CAAjB,CAArB;AAOA,WAAOxB,YAAP;AACH,GAdD,CAcE,OAAOS,KAAP,EAAc,CAAG;AACtB,CAhBM;AAkBP,OAAO,MAAMkB,iBAAiB,GAAG,MAAO5C,EAAP,IAAc;AAC3C,MAAI;AACA,UAAM;AAAEU,MAAAA;AAAF,QAAW,MAAMpB,KAAK,CAACqB,GAAN,CAAW,GAAEhB,QAAS,IAAGK,EAAG,UAA5B,EAAuC;AAC1DY,MAAAA,MAAM,EAAE;AACJC,QAAAA,OAAO,EAAEtB,MADL;AAEJuB,QAAAA,QAAQ,EAAE;AAFN;AADkD,KAAvC,CAAvB;AAMA,UAAME,SAAS,GAAG,sCAAlB;AACA,UAAMC,YAAY,GAAGP,IAAI,CAAC,SAAD,CAAJ,CAAgBQ,GAAhB,CAAqBC,CAAD,KAAQ;AAC7CnB,MAAAA,EAAE,EAAEmB,CAAC,CAAC,IAAD,CADwC;AAE7CC,MAAAA,UAAU,EAAEJ,SAAS,GAAGG,CAAC,CAAC,eAAD,CAFoB;AAG7CE,MAAAA,UAAU,EAAEF,CAAC,CAAC,YAAD,CAHgC;AAI7CG,MAAAA,KAAK,EAAEH,CAAC,CAAC,OAAD,CAJqC;AAK7CI,MAAAA,MAAM,EAAEP,SAAS,GAAGG,CAAC,CAAC,aAAD,CALwB;AAM7CK,MAAAA,QAAQ,EAAEL,CAAC,CAAC,UAAD,CANkC;AAO7CM,MAAAA,MAAM,EAAEN,CAAC,CAAC,cAAD;AAPoC,KAAR,CAApB,CAArB;AAUA,WAAOF,YAAP;AACH,GAnBD,CAmBE,OAAOS,KAAP,EAAc,CAAG;AACtB,CArBM","sourcesContent":["\r\nimport axios from 'axios';\r\n\r\nconst apiKey = '618a4d3048a1a1f797c014affaf110b4';\r\nconst url = 'https://api.themoviedb.org/3';\r\nconst nowPlayingUrl = `${url}/movie/now_playing`;\r\nconst topratedUrl = `${url}/movie/top_rated`;\r\nconst movieUrl = `${url}/movie`;\r\nconst genreUrl = `${url}/genre/movie/list`;\r\nconst moviesUrl = `${url}/discover/movie`;\r\nconst personUrl = `${url}/trending/person/week`;\r\n\r\n\r\nconst handleMovieClick = (id, path) => async (dispatch) => {\r\n    dispatch({ type: MOVIE_CLICKED, payload: id });\r\n  \r\n    let navigationPath = `${path}/${id}/details`;\r\n  \r\n    history.push(navigationPath);\r\n  };\r\n  \r\nexport const fetchMovies = async () => {\r\n    try {\r\n        const { data } = await axios.get(nowPlayingUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchGenre = async () => {\r\n    try {\r\n        const { data } = await axios.get(genreUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const modifiedData = data['genres'].map((g) => ({\r\n            id: g['id'],\r\n            name: g['name']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchMovieByGenre = async (genre_id) => {\r\n    try {\r\n        const { data } = await axios.get(moviesUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1,\r\n                with_genres: genre_id\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchPersons = async () => {\r\n    try {\r\n        const { data } = await axios.get(personUrl, {\r\n            params: {\r\n                api_key: apiKey\r\n            }\r\n        })\r\n        const modifiedData = data['results'].map((p) => ({\r\n            id: p['id'],\r\n            popularity: p['popularity'],\r\n            name: p['name'],\r\n            profileImg: 'https://image.tmdb.org/t/p/w200' + p['profile_path'],\r\n            known: p['known_for_department']\r\n        }))\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchTopratedMovie = async () => {\r\n    try {\r\n        const { data } = await axios.get(topratedUrl, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US',\r\n                page: 1\r\n            }\r\n        })\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) {\r\n\r\n    }\r\n}\r\n\r\nexport const fetchMovieDetail = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        return data;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchMovieVideos = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/videos`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        return data['results'][0];\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchCasts = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/credits`, {\r\n            params: {\r\n                api_key: apiKey,\r\n            }\r\n        });\r\n        const modifiedData = data['cast'].map((c) => ({\r\n            id: c['cast_id'],\r\n            character: c['character'],\r\n            name: c['name'],\r\n            img: 'https://image.tmdb.org/t/p/w200' + c['profile_path'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}\r\n\r\nexport const fetchSimilarMovie = async (id) => {\r\n    try {\r\n        const { data } = await axios.get(`${movieUrl}/${id}/similar`, {\r\n            params: {\r\n                api_key: apiKey,\r\n                language: 'en_US'\r\n            }\r\n        });\r\n        const posterUrl = 'https://image.tmdb.org/t/p/original/';\r\n        const modifiedData = data['results'].map((m) => ({\r\n            id: m['id'],\r\n            backPoster: posterUrl + m['backdrop_path'],\r\n            popularity: m['popularith'],\r\n            title: m['title'],\r\n            poster: posterUrl + m['poster_path'],\r\n            overview: m['overview'],\r\n            rating: m['vote_average'],\r\n        }))\r\n\r\n        return modifiedData;\r\n    } catch (error) { }\r\n}"]},"metadata":{},"sourceType":"module"}